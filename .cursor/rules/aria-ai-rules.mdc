---
description: Clean Architecture enforcement for AI Chat Application
globs: 
alwaysApply: true
---

# Clean Architecture Enforcement

You are building an AI chat application with **strict clean architecture**. Follow these rules exactly:

## üö´ IMMEDIATE FAILURE CONDITIONS
- **Any SQL outside `/repositories/` files** = STOP
- **Any `console.log` or `console.error`** = STOP  
- **Not extending `AbstractService`** = STOP
- **Manual service creation** (e.g., `new ServiceName()`) = STOP

## üö® PROTECTED FILES (DO NOT MODIFY)
- **Files prefixed with `CORE_`** = Foundation services, DO NOT TOUCH
- **If CORE_ functionality insufficient** = Extend or compose, don't modify
- **Ask human before suggesting changes** to any CORE_ file

Examples of protected files:
- `CORE_LoggerService.js`, `CORE_PsychologyService.js`, `CORE_DataAccessLayer.js`

## ü§ñ WHEN TO STOP AND ASK HUMAN
- Need to modify any CORE_ prefixed file
- Repository method doesn't exist for required operation  
- Unsure if functionality already exists in psychology/structuredResponse
- Complex database schema changes needed

## ‚úÖ MANDATORY PATTERNS

### Service Creation (EXACT PATTERN):
```javascript
const AbstractService = require('./base/AbstractService');

class YourService extends AbstractService {
    constructor(dependencies) {
        super('YourService', dependencies);
        this.dal = dependencies.database;
        this.logger = dependencies.logger;
        this.psychology = dependencies.psychology; // Other services
    }
    
    async onInitialize() {
        this.logger.info('Service initialized', 'YourService');
    }
    
    async yourMethod(userId, param) {
        try {
            // All user operations MUST include userId
            const result = await this.dal.yourRepo.method(userId, param);
            return result;
        } catch (error) {
            throw this.errorHandler.wrapDomainError(error, 'Method failed', { userId, param });
        }
    }
}
```

### Service Registration (MANDATORY):
```javascript
// In setupServices.js - EVERY service MUST be registered
serviceFactory.registerService('yourService', YourService, [
    'database', 'logger', 'errorHandling', 'psychology'
]);
```

### Database Access (ONLY ALLOWED WAY):
```javascript
// ‚úÖ CORRECT - Through DAL only
await this.dal.chats.getUserChats(userId);
await this.dal.psychology.getState(userId, chatId);

// ‚ùå FORBIDDEN - Direct SQL
this.db.run("SELECT...");  // NEVER
```

## üí° AI QUICK REFERENCE
```javascript
// ‚úÖ ALWAYS: Check if repository method exists first
const user = await this.dal.users.findById(userId);

// ‚ùå NEVER: Direct SQL (breaks validation)
// const user = await this.db.query("SELECT...");

// ‚úÖ ALWAYS: Include userId for data isolation
await this.dal.chats.getUserChats(userId);

// ‚ùå NEVER: Operations without user context  
// await this.dal.chats.getAllChats();
```

## üèóÔ∏è MULTI-USER ARCHITECTURE
- **Every database operation** MUST include `userId` for data isolation
- **Chat-centric psychology**: `userId + chatId + characterId` pattern
- **Multi-device continuity**: Use `chatId` as universal key

## üîÑ DEVELOPMENT WORKFLOW
1. **Build ONE component** (single file)
2. **Write unit tests** immediately
3. **Run validation**: `node validate-architecture.js` (must pass)
4. **Integration test** with existing services
5. **Only then proceed** to next component

## üß† EXISTING SERVICES (USE, DON'T RECREATE OR MODIFY)
- `dependencies.psychology` - Character psychology (KEEP 100% - DO NOT MODIFY)
- `dependencies.structuredResponse` - JSON parsing (KEEP 100% - DO NOT MODIFY)
- `dependencies.llm` - Dual model LLM (KEEP 100% - DO NOT MODIFY)
- `dependencies.conversationMemory` - Context intelligence
- `dependencies.database` - DAL with repositories

## üìã VALIDATION CHECKLIST
Before submitting code, verify:
- [ ] Extends AbstractService
- [ ] Uses constructor(dependencies) pattern
- [ ] All database access through `this.dal.repository`
- [ ] All user operations include `userId`
- [ ] No console.log anywhere
- [ ] No direct SQL anywhere
- [ ] Registered in setupServices.js
- [ ] Unit tests written
- [ ] No modifications to CORE_ files

**CRITICAL**: Follow patterns exactly. Do not create variations or "improvements".